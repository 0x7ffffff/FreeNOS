[bugs]
* PoolAllocator: make sure minimize wasted space for large chunks: penatilize
    a bit for larger blocks, e.g. don't allocate 64 times 4096, but e.g. only 8 or 32 times 4096 or so.

    --> MemoryPool::allocate() divides by 8, then by sizeof(Address) ; can't work for <= 32
	--> need updates there.

    --> ps freezes sometimes after I execute: 'ls /img/lost+found',
        which is probably caused by the above... (temp now workaround in dirent.cpp)

* Running 'ps' a couple of times, reveales a memory leak somewhere... (memstat shows this)
* MemoryServer::doGrow() allocated a whole page, if e.g. only 1 byte is requested...
* remove IRQ hooks in ~x86Process(). Also, cleanup pending messages?
    --> simply keep a list with the copy of InterruptHook in each Process...
    --> Maybe also output this in ProcessInfo! :)

[project]
* clean way to build a boot.img
    --> fix include/ et all???
    --> make bootimage
    --> make iso
* maybe create a /VERSION, which is then used by scripts/version.mk
* maybe put all include/api/*.h include/arch/*.h files just in
  kernel/, and include/*.h in lib/libparse,libalgo(rithm),libcommon,libdata (find a good name).
* fixup rules.mk: just everything lowercase, simplify everything :-)
    --> parallel make
    --> we should be able to link the *init sections, without --whole-library... e.g. kernel doesn't need everything from libposix! 
	--> we actually don't need .init sections which we do not use :)
* if we have the main() argc/argv thingies, we could do configure
  the boot modules to use /dev/serial0 as the system console! :)
* Import kbuild! --> `.SECONDEXPANSION' in Makefiles maybe?

[libraries]
* libparse: generic parser library, usefull for the Shell too! :)

    --> CommandLine
    --> StringParser, CommandLineParser, URLParser, ConfigurationParser
	XMLParser, RegexParser, HTTPParser, HTMLParser, ...
    --> URLParser may replace FileSystemPath aswell! :)

* libc: %NUMs formats support
* libposix:
    --> try to fork()
    --> try to execl() a file in /img
    --> fixup all posix library function documentation!!!

[programs]
* Let the user /sbin/init drop it's priviledges to the lowest (least priviledged) runlevel.
* Commandline argc/argv support; via libparse.
* Random stack, heap and program text!!!
* We DON'T want setuid/setgid bits! (and we really don't need them either).
* Implement touch(1) and mkdir(1) and cd(1)

[servers]
* logging daemon: ALL logging goes through this one, including (u)tmp etc.
* Faults -> process manager must receive the Fault message! e.g. use faultPID or so???
* Implement the notion of "current directory" in VirtualFileSystem.
* Let the filesystem perform auth checks aswell ;D
* /srv/usb/hub
* /srv/usb/disk
* /srv/storage, with a ramdisk and scsi (lsi's)
    --> Test it using, e.g. a dosfs dump of the project root
* /srv/filesystem, simple dosfs first
* /srv/memory: per process virtual memory stats.
    --> PROCESS_FOOTPRINT on initialization
    --> Use modEnd-modStart to calculate addition number of pages for boot modules
    --> then, for each MemoryMessage, just add it to the counter! :)
* Login server: allocate a pseudo tty? 
* Reincarnation server, a la minix 3.
* Inet server: maybe a /net, like in plan 9! :)
* make a /dev/random! e.g. RDTSC, IRQ's etc.

[sources]
* turn on the le/be type warnings!!!
* fix Assert.h:
    --> we COULD map page tables + dirs READONLY in every proces.. this way, assertRead/Write is very
        efficient!!! (define inline/macros in arch/ for this)
	--> the same *COULD* be done for remotes, but be VERY carefull (NOT r/w too).
	--> /proc/maps!	
    --> perhaps, memory server can then do more management of virtual memory?

* /boot directory, containing the grub.conf (instead of inside image.mk)
* Automatic copying of every file in the project to boot.iso!
* SVN's $headURL inside debug()?
* use #define ArchXXX etc
* void Memory::releasePhysical(Address addr)  <--- include size here?
* FooMessage.doBar() wrapper functions?

[kernel]
* kernel messages/logging... simply use LogMessage now :-)
* VMCtl() : maybe pass two Address pointers!!! Then write the actual used paddr + vaddr there!!!
* userlevel processes should NOT be allowed to IPC asynchroneously; e.g. to the VFS server; use runlevels.
* We could merge the two mapVirtual() overloads into one, then check for p == this :)
* IPC via files in /proc? :)
* perhaps we should allow multiple messages to be fetched in IPCMessage()! (speed++)
* Improve scheduler: don't put a Process on the queue if it isn't Ready!
    --> Also, fix the timer interval to switch processes --> currently a bit too fast...?
    --> Can we actually put the scheduler in userspace? Maybe a task gate? Is this slow?
* how to IPC using CPU registers only?
* SMP support!
