[DEFERRED]
++ FIX: Keyboard controller: real hardware, and in Virtualbox, doesn't respond! (keymapping problem?)
    --> THE PROBLEM IS THE COM1 PORT!!!!!!!
	--> DETECT IT PROPERLY

--> ps is slow!!! (isn't the whole vfs slow?)
    --> we need a timer function to identify the problem.
    --> I suspect open() to be the bottleneck.

--> fix Assert.h
    --> we COULD map page tables + dirs READONLY in every proces.. this way, assertRead/Write is very
        efficient!!! (define inline/macros in arch/ for this)
	--> the same *COULD* be done for remotes, but be VERY carefull (NOT r/w too).
	--> /proc/maps!	
    --> perhaps, memory server can then do more management of virtual memory?

[first]

[6] --> devpts filesystem, for terminals!
[7] --> Nameserver for lookups! Do we need a nameserver? (YES)
[8] --> BlockMessage, for VGA driver (libteken)
        CharacterMessage, for i8250 driver (raw)
[9] --> libteken voor de terminal server!!!
[10] -->  Nicer /bin/sh:
        --> BACKSPACE should be supported. (low prio)
        --> ShellCommand class, and allow it to be derived. (high prio)
	    --> INIT's!!! --> libcrt should support this too ofcourse.
[11] --> remove IRQ hooks in ~x86Process(). Also, cleanup pending messages?
     --> simply keep a list with the copy of InterruptHook in each Process...
	--> Maybe also output this in ProcessInfo! :)
[12] --> Implement the notion of "current directory" in VirtualFileSystem.

[second]
[13] --> Faults -> process manager must receive the Fault message!
	--> e.g. use faultPID or so???
[15] --> Don't use ugly unions!!! Perhapse we can modify ::run() to customize
	 messages even more for handlers!
  
	  --> Better: just use FileMessage as a base class, derive the others :) (simple, works with current IPCServer too! :)
  
	    FileReadMessage  ] FileIOMessage
	    FileWriteMessage ]
	    FileCloseMessage ...

[16] --> /srv/storage/ram -> register to FileSystemServer
[17] --> Ext2FileSystem
[18] --> Let init drop it's priviledges (syscalls, ipc, etc)
[19] --> VMCtl() : maybe pass two Address pointers!!! Then write the actual used paddr + vaddr there!!!
[20] --> kernel messages/logging...

[bugs]
* "Cursor pointer" in the VGA screen isn't updated...
* MemoryServer::doGrow() allocated a whole page, if e.g. only 1 byte is requested...
* fix parallel make (LD of the kernel that is, which races against $(subdirs)!)

[libraries]
* libc: %NUMs formats support

[programs]
* Random stack, heap and program text!!!
* We DON'T want setuid/setgid bits! (and we really don't need them either).

[servers]
* /srv/storage, with a ramdisk and scsi (lsi's)
    --> Test it using, e.g. a dosfs dump of the project root
* /srv/filesystem, simple dosfs first
* /srv/memory: per process virtual memory stats.
    --> PROCESS_FOOTPRINT on initialization
    --> Use modEnd-modStart to calculate addition number of pages for boot modules
    --> then, for each MemoryMessage, just add it to the counter! :)
* Login server: allocate a pseudo tty? 
* Reincarnation server, a la minix 3.
* Inet server.

[sources]
* Perhaps, find a clean way to build libc and libposix using gcc and .c, instead of g++ and .cpp
    --> maybe, an extern C function in C++, which then can be used from pure C code, to send IPC messages...
* /boot directory, containing the grub.conf (instead of inside image.mk)
* Automatic copying of every file in the project to boot.iso!
* SVN's $headURL inside debug()?
* use #define ArchXXX etc
* void Memory::releasePhysical(Address addr)  <--- include size here?
* FooMessage.doBar() wrapper functions?

[kernel]
* perhaps we should allow multiple messages to be fetched in IPCMessage()! (speed++)
* Improve scheduler: don't put a Process on the queue if it isn't Ready!
    --> Also, fix the timer interval to switch processes --> currently a bit too fast...?
    --> Can we actually put the scheduler in userspace? Maybe a task gate? Is this slow?
* how to IPC using CPU registers only?
* SMP support!
